{"ast":null,"code":"var _jsxFileName = \"/home/arun/url_shortener/app/javascript/packs/count.js\";\nimport React from \"react\";\n//  import CountUp from \"react-countup/build/CountUp\";\n\nfunction Count() {\n  var num1 = 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, \"value: \", num1)\n  //     <CountUp start={0} end={100}>\n  //     {({ countUpRef, start }) => (\n  //       <div>\n  //         <span ref={countUpRef} />\n  //         <button onClick={start}>Start</button>\n  //       </div>\n  //     )}\n  //   </CountUp>\n  ;\n}\n\nexport default Count;\n\n// import React, { useEffect, useState } from 'react';\n\n// const Count = props => {\n//   // label of counter\n//   // number to increment to\n//   // duration of count in seconds\n//   const {label, number, duration } = props.data\n\n//   // number displayed by component\n//   const [count, setCount] = useState(\"0\")\n\n//   useEffect(() => {\n//     let start = 0;\n//     // first three numbers from props\n//     const end = parseInt(number.substring(0,3))\n//     // if zero, return\n//     if (start === end) return;\n\n//     // find duration per increment\n//     let totalMilSecDur = parseInt(duration);\n//     let incrementTime = (totalMilSecDur / end) * 1000;\n\n//     // timer increments start counter \n//     // then updates count\n//     // ends if start reaches end\n//     let timer = setInterval(() => {\n//       start += 1;\n//       setCount(String(start) + number.substring(3))\n//       if (start === end) clearInterval(timer)       \n//     }, incrementTime);\n\n//     // dependency array\n//   }, [number, duration]);\n\n//   return (\n//     <div className=\"Count\">\n//       <h3>\n//         <i>{label}: {count}</i>\n//       </h3>\n//     </div>\n//   );\n// }\n\n// export default Count;","map":{"version":3,"names":["React","Count","num1","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/arun/url_shortener/app/javascript/packs/count.js"],"sourcesContent":["import React from \"react\";\n//  import CountUp from \"react-countup/build/CountUp\";\n\n\nfunction Count(){\n\n    const num1=0;\n\n    return(\n\n\n        <div>\n            value: {num1}            \n        </div>\n    //     <CountUp start={0} end={100}>\n    //     {({ countUpRef, start }) => (\n    //       <div>\n    //         <span ref={countUpRef} />\n    //         <button onClick={start}>Start</button>\n    //       </div>\n    //     )}\n    //   </CountUp>\n    )\n}\n\nexport default Count;\n\n// import React, { useEffect, useState } from 'react';\n\n\n// const Count = props => {\n//   // label of counter\n//   // number to increment to\n//   // duration of count in seconds\n//   const {label, number, duration } = props.data\n\n//   // number displayed by component\n//   const [count, setCount] = useState(\"0\")\n\n//   useEffect(() => {\n//     let start = 0;\n//     // first three numbers from props\n//     const end = parseInt(number.substring(0,3))\n//     // if zero, return\n//     if (start === end) return;\n\n//     // find duration per increment\n//     let totalMilSecDur = parseInt(duration);\n//     let incrementTime = (totalMilSecDur / end) * 1000;\n\n//     // timer increments start counter \n//     // then updates count\n//     // ends if start reaches end\n//     let timer = setInterval(() => {\n//       start += 1;\n//       setCount(String(start) + number.substring(3))\n//       if (start === end) clearInterval(timer)       \n//     }, incrementTime);\n\n//     // dependency array\n//   }, [number, duration]);\n\n//   return (\n//     <div className=\"Count\">\n//       <h3>\n//         <i>{label}: {count}</i>\n//       </h3>\n//     </div>\n//   );\n// }\n\n// export default Count;\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAGA,SAASC,KAAKA,CAAA,EAAE;EAEZ,IAAMC,IAAI,GAAC,CAAC;EAEZ,oBAGIF,KAAA,CAAAG,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,SACM,EAACP,IACP;EACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;;AAEA,eAAeD,KAAK;;AAEpB;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}